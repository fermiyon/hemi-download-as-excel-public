// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.selmank

/**
usage:
val obj = scalaxb.fromXML[.Foo](node)
val document = scalaxb.toXML[.Foo](obj, "foo", .defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val RECORDFormat: scalaxb.XMLFormat[RECORD] = new DefaultRECORDFormat {}
  implicit lazy val LISTFormat: scalaxb.XMLFormat[LIST] = new DefaultLISTFormat {}

  trait DefaultRECORDFormat extends scalaxb.ElemNameParser[RECORD] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RECORD] =
      phrase((scalaxb.ElemName(None, "SUBE_KODU")) ~ 
      (scalaxb.ElemName(None, "REFNO")) ~ 
      (scalaxb.ElemName(None, "STOK_KODU")) ~ 
      (scalaxb.ElemName(None, "STOK_ADI")) ~ 
      (scalaxb.ElemName(None, "ALISFIYATI")) ~ 
      (scalaxb.ElemName(None, "P_KDV")) ~ 
      (scalaxb.ElemName(None, "SATISFIYATI1")) ~ 
      (scalaxb.ElemName(None, "BARKOD")) ~ 
      (scalaxb.ElemName(None, "BARKOD2")) ~ 
      (scalaxb.ElemName(None, "BARKOD3")) ~ 
      (scalaxb.ElemName(None, "URETIM_YERI_NO")) ~ 
      (scalaxb.ElemName(None, "FIYAT_DEGISIM_TARIHI")) ~ 
      (scalaxb.ElemName(None, "BIRIM2")) ~ 
      (scalaxb.ElemName(None, "BIRIM2SATISFIYATI")) ~ 
      (scalaxb.ElemName(None, "BIRIM2BARKODU")) ~ 
      (scalaxb.ElemName(None, "BAKIYE")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      RECORD(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Byte](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p13, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p15, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p16, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: RECORD, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.SUBE_KODU, None, Some("SUBE_KODU"), __scope, false),
        scalaxb.toXML[Int](__obj.REFNO, None, Some("REFNO"), __scope, false),
        scalaxb.toXML[String](__obj.STOK_KODU, None, Some("STOK_KODU"), __scope, false),
        scalaxb.toXML[String](__obj.STOK_ADI, None, Some("STOK_ADI"), __scope, false),
        scalaxb.toXML[String](__obj.ALISFIYATI, None, Some("ALISFIYATI"), __scope, false),
        scalaxb.toXML[Byte](__obj.P_KDV, None, Some("P_KDV"), __scope, false),
        scalaxb.toXML[Float](__obj.SATISFIYATI1, None, Some("SATISFIYATI1"), __scope, false),
        scalaxb.toXML[String](__obj.BARKOD, None, Some("BARKOD"), __scope, false),
        scalaxb.toXML[String](__obj.BARKOD2, None, Some("BARKOD2"), __scope, false),
        scalaxb.toXML[String](__obj.BARKOD3, None, Some("BARKOD3"), __scope, false),
        scalaxb.toXML[String](__obj.URETIM_YERI_NO, None, Some("URETIM_YERI_NO"), __scope, false),
        scalaxb.toXML[String](__obj.FIYAT_DEGISIM_TARIHI, None, Some("FIYAT_DEGISIM_TARIHI"), __scope, false),
        scalaxb.toXML[String](__obj.BIRIM2, None, Some("BIRIM2"), __scope, false),
        scalaxb.toXML[String](__obj.BIRIM2SATISFIYATI, None, Some("BIRIM2SATISFIYATI"), __scope, false),
        scalaxb.toXML[String](__obj.BIRIM2BARKODU, None, Some("BIRIM2BARKODU"), __scope, false),
        scalaxb.toXML[Float](__obj.BAKIYE, None, Some("BAKIYE"), __scope, false))

  }

  trait DefaultLISTFormat extends scalaxb.ElemNameParser[LIST] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[LIST] =
      phrase(rep(scalaxb.ElemName(None, "RECORD")) ^^
      { case p1 =>
      LIST(p1.toSeq map { scalaxb.fromXML[RECORD](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: LIST, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RECORD flatMap { scalaxb.toXML[RECORD](_, None, Some("RECORD"), __scope, false) })

  }


}

